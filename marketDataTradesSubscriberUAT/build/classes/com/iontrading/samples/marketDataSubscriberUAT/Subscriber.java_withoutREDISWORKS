package com.iontrading.samples.simplePatternSubscriber;

import com.iontrading.mkv.Mkv;
import com.iontrading.mkv.MkvComponent;
import com.iontrading.mkv.MkvObject;
import com.iontrading.mkv.MkvPattern;
import com.iontrading.mkv.MkvRecord;
import com.iontrading.mkv.MkvSupply;
import com.iontrading.mkv.enums.MkvObjectType;
import com.iontrading.mkv.enums.MkvPlatformEvent;
import com.iontrading.mkv.events.MkvPlatformListener;
import com.iontrading.mkv.events.MkvPublishListener;
import com.iontrading.mkv.events.MkvRecordListener;
import com.iontrading.mkv.exceptions.MkvException;
import com.iontrading.mkv.qos.MkvQoS;

public class Subscriber {

    private static final String SOURCE = "VMO_REPO_US";
    private static final String PATTERN = "USD.CM_DEPTH." + SOURCE + ".";

    /** Creates a new instance of Subscriber */
    public Subscriber(String[] args) {
        MkvQoS qos = new MkvQoS();
        qos.setArgs(args);
        qos.setPlatformListeners(new MkvPlatformListener[] {new PlatformListener()});
        try {
            Mkv mkv = Mkv.start(qos);
        } catch (MkvException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Subscriber sub = new Subscriber(args);
    }

    private class DataListener implements MkvRecordListener {

    	public void onPartialUpdate(MkvRecord mkvRecord, MkvSupply mkvSupply, boolean isSnapshot) {}

        public void onFullUpdate(MkvRecord mkvRecord, MkvSupply mkvSupply, boolean isSnapshot) {
            try {
                String out = "Record " + mkvRecord.getName() + " : ";
                int cursor = mkvSupply.firstIndex();
                while (cursor!=-1) {
                    out +=  mkvRecord.getMkvType().getFieldName(cursor) +
                            " {" + mkvSupply.getObject(cursor) + "} ";
                    cursor = mkvSupply.nextIndex(cursor);
                }
                System.out.println((isSnapshot?"Snp ":"Upd ") + out);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private class PlatformListener implements MkvPlatformListener {

		public void onComponent(MkvComponent component, boolean start) {}

		public void onConnect(String component, boolean start) {}

		public void onMain(MkvPlatformEvent event) {
			if (event.equals(MkvPlatformEvent.START)) {
				Mkv.getInstance().getPublishManager().addPublishListener(new PublishListener());
			}
		}
    }

    private class PublishListener implements MkvPublishListener {

		public void onPublish(MkvObject mkvObject, boolean start, boolean download) {
			if (start) {
				if (!download) {
					// a new object has been published at runtime
					// check if the component is interested in.
					if (mkvObject.getMkvObjectType().equals(MkvObjectType.PATTERN)) {
						try {
							MkvRecordListener listener = new DataListener();
							((MkvPattern)mkvObject).subscribe(new String[] {"Bid0", "Bid1", "Bid2", "Bid3", "Bid4", "Bid5", "Bid6", "Bid7", "Bid8", "Bid9", "Bid10", "Bid11", "Bid12", "Bid13", "Ask0", "Ask1", "Ask2", "Ask3", "Ask4", "Ask5", "Ask6", "Ask7", "Ask8", "Ask9", "Ask10", "Ask11", "Ask12", "Ask13", "AskSize0","BidSize0","AskSize1","BidSize1","AskSize2","BidSize2","AskSize3","BidSize3","AskSize4","BidSize4","AskSize5","BidSize5","AskSize6","BidSize6","AskSize7","BidSize7","AskSize8","BidSize8","AskSize9","BidSize9","AskSize10","BidSize10","AskSize11","BidSize11","AskSize12","BidSize12","AskSize13","BidSize13"}, listener);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				} else {
					// the publication is part of a download, wait for the idle.
				}
			} else {
				// handle the un-publish.
				// Incase free the resources linked to the publication in case it has been
				// subscribed to.
			}
		}

        public void onPublishIdle(String component, boolean start) {
        	MkvObject mkvObj = Mkv.getInstance().getPublishManager().getMkvObject(PATTERN);
        	if (mkvObj!=null) {
        		if (mkvObj.getMkvObjectType().equals(MkvObjectType.PATTERN)) {
        			try {
	                    MkvRecordListener listener = new DataListener();
	        			((MkvPattern)mkvObj).subscribe(new String[] {"Bid0", "Bid1", "Bid2", "Bid3", "Bid4", "Bid5", "Bid6", "Bid7", "Bid8", "Bid9", "Bid10", "Bid11", "Bid12", "Bid13", "Ask0", "Ask1", "Ask2", "Ask3", "Ask4", "Ask5", "Ask6", "Ask7", "Ask8", "Ask9", "Ask10", "Ask11", "Ask12", "Ask13", "AskSize0","BidSize0","AskSize1","BidSize1","AskSize2","BidSize2","AskSize3","BidSize3","AskSize4","BidSize4","AskSize5","BidSize5","AskSize6","BidSize6","AskSize7","BidSize7","AskSize8","BidSize8","AskSize9","BidSize9","AskSize10","BidSize10","AskSize11","BidSize11","AskSize12","BidSize12","AskSize13","BidSize13"}, listener);
        			} catch (Exception e) {
        				e.printStackTrace();
        			}
        		}
        	}
        }

        public void onSubscribe(MkvObject mkvObject) {
            // not interested in this event because our component is a pure subscriber
            // and is not supposed receiving request for subscriptions.
        }

    }
}
